-- systems --

function init_obj(o)
	try(o.type.init, o)
end

function update_obj(o)
	try(o.type.update, o)
	
	if(coll(o, player_i)) then
		on_coll_obj(o)
	end
	
end

function on_coll_obj(o)
	try(o.type.on_coll, o)
end

function draw_obj_ly(ly)
	for i=1, size(objects), 1 do
		if(objects[i].tile.ly==ly) then
			draw_obj(objects[i])
		end
	end
end

function draw_obj(o)
	if(not in_grid(o)) then return end
	
	t = o.tile
	
	spr(
		t.id, scr_pos(o.x), scr_pos(o.y),
		t.w,
		t.h,
		t.flipped
	)
end

function move_x(o, dx)
	if(dx==0) then return end
	
	sg = sign(dx)
	o.rem = {x=sg,y=0}
	
	for i=dx, sg, -sg do	
		if(hits(o, is_solid)) then
			break
		else
			o.x += sg
		end
	end

end

function move_y(o, dy)
	if(dy==0) then return end
	
	sg = sign(dy)
	o.rem = {x=0,y=sg}
	
	for i=dy, sg, -sg do	
		if(
			hits(o, is_solid)
			or
			hits_blv(o, is_edge)
		) then
			break
		else
			o.y += sg
		end
	end
end

function hits(o, cb)
    x, y, w, h = get_bounds(o)

	return (
		cb(x,y) or cb(x+w,y)
		or
		cb(x,y+h) or cb(x+w,y+h)
	)
end

function hits_blv(o, cb)
	if(o.rem.y<=0) then
		return false
	end

    x, y, w, h = get_bounds(o)

	return (
		cb(x,y+h) and not cb(x,y+h-1)
		or
		cb(x+w,y+h) and not cb(x+w,y+h-1)
	)
end

function is_grounded(o)
    x, y, w, h = get_bounds_int(o)

    pts = {
        {x, y+h+1},
        {x+w, y+h+1}
    }

    out = {}
    if(
        is_platform(x, y+h+1, out)
		or
		is_platform(x+w, y+h+1, out)
    ) then
        //out.type.linked = o
        return true
    end

	return at_least_one(pts, is_floor)
end


-- collisions --

function is_dmg(x, y)
	return fget(mget(x/8,y/8),0)
end

function is_floor(x, y)
	return is_solid(x,y) or is_edge(x,y)
end

function is_solid(x, y)
	return fget(mget(x/8,y/8),3)
end

function is_edge(x, y)
	y1 = y-1

    if is_platform(x, y, _) then
        return true
    end

	return
		fget(mget(x/8,y/8),2)
		and not
		fget(mget(x/8,y1/8),2)
end

function is_platform(x, y, out)
    y1 = y-1

	// iterate moving platforms
	for _, v in ipairs(platforms) do
		if(
			contains(v, x, y)
			and not
			contains(v, x, y1)
		) then
            out = v
			return true
		end
	end

    return false
end

function at_least_one(objs, cb)
    for obj in all(objs) do
        if cb(obj[1], obj[2]) then return true end
    end

    return false
end


-- bounds --

function get_bounds(o)
    x, y, w, h = get_bounds_int(o)

    return
        x + o.rem.x,
        y + o.rem.y,
        w, h
end

function get_bounds_int(o)
    b = o.box

    x = o.x + b.x
    y = o.y + b.y
    w = b.w - 1
    h = b.h - 1

    return x, y, w, h
end