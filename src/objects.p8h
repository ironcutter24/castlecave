objects = {}

function new_obj(_type,_x,_y,_cb)
	local obj = {}
	obj.type = _type
	obj.x = _x*8
	obj.y = _y*8
	
	obj.rem = {x=0,y=0}
	
	obj.h_spd = 1
	obj.v_spd = 0
	
	obj.box = {x=0,y=0,w=8,h=8}
	obj.tile = {
		id=0,
		ly=0,
		w=1,
		h=1,
		flipped=false,
		has_anim=true,
	}
	try(_cb, obj)
	return add(objects, obj)
end

function coll(a, b)
	return (
		a.x+a.box.x <= b.x+b.box.w-1
			and
		b.x+b.box.x <= a.x+a.box.w-1
			and
		a.y+a.box.y <= b.y+b.box.h-1
			and
		b.y+b.box.y <= a.y+a.box.h-1
	)
end

function init_obj(o)
	try(o.type.init, o)
end

function update_obj(o)
	try(o.type.update, o)
	
	if(coll(o, player_i)) then
		on_coll_obj(o)
	end
	
end

function on_coll_obj(o)
	try(o.type.on_coll, o)
end

function draw_obj_ly(ly)
	for i=1, size(objects), 1 do
		if(objects[i].tile.ly==ly) then
			draw_obj(objects[i])
		end
	end
end

function draw_obj(o)
	if(not in_grid(o)) then return end
	
	t = o.tile
	
	spr(
		t.id, scr_pos(o.x), scr_pos(o.y),
		t.w,
		t.h,
		t.flipped
	)
end

function move_x(o, dx)
	if(dx==0) then return end
	
	sg = sign(dx)
	o.rem = {x=sg,y=0}
	
	for i=dx, sg, -sg do	
		if(hits(o, is_solid)) then
			break
		else
			o.x += sg
		end
	end

end

function move_y(o, dy)
	if(dy==0) then return end
	
	sg = sign(dy)
	o.rem = {x=0,y=sg}
	
	for i=dy, sg, -sg do	
		if(
			hits(o, is_solid)
			or
			hits_blv(o, is_edge)
		) then
			break
		else
			o.y += sg
		end
	end
end

function hits(o, cb)
	x = o.x + o.box.x + o.rem.x
	y = o.y + o.box.y + o.rem.y
	w = o.box.w - 1
	h = o.box.h - 1

	return (
		cb(x,y) or cb(x+w,y)
		or
		cb(x,y+h) or cb(x+w,y+h)
	)
end

function hits_blv(o, cb)
	if(o.rem.y<=0) then
		return false
	end

	x = o.x + o.box.x + o.rem.x
	y = o.y + o.box.y + o.rem.y
	w = o.box.w - 1
	h = o.box.h - 1

 return (
  cb(x,y+h) and not cb(x,y+h-1)
  or
		cb(x+w,y+h) and not cb(x+w,y+h-1)
	)
end

function is_grounded(o)
	b = o.box
	
	x = o.x + b.x
	y = o.y + b.y

	return
		is_solid(x, y+b.h) or
		is_solid(x+b.w-1, y+b.h)
		or
		(
			is_edge(x, y+b.h)
			and not
			is_edge(x, y+b.h-1)
		)
		or
		(
			is_edge(x+b.w-1, y+b.h)
			and not
			is_edge(x+b.w-1, y+b.h-1)
		)
end

function is_solid(x, y)
	return fget(mget(x/8,y/8),3)
end

function is_dmg(x, y)
	return fget(mget(x/8,y/8),0)
end

function is_edge(x, y)

	// iterate moving platforms
	for _, v in ipairs(platforms) do
		if(
			in_range(
				x,
				v.x + v.box.x,
				v.x + v.box.x + v.box.w
			)
			and
			in_range(
				y,
				v.y + v.box.y,
				v.y + v.box.y + v.box.h
			)
		) then
			return true
		end
	end

	return fget(mget(x/8,y/8),2)
end

function is_floor(x, y)
	return is_solid(x,y) or is_edge(x,y)
end


-- powerup orb --

function on_coll_orb(o)
	player_pu()
end


-- checkpoint --

function init_chkpt(o)
	o.box = {x=0,y=0,w=8,h=16}
	o.tile.id = 64
	o.tile.h = 2
end

function on_coll_chkpt(o)
	if(o.type.is_active) then return end
	o.type.is_active = true
	o.tile.id = 65
	
	player_i.type.lives = max_lives
	player_i.type.last_cp = {x=o.x,y=o.y+8}
	
	sfx(7)
end


-- platforms --

platforms = {}

function spawn_platforms()
	new_obj(t_platform(1), 3,7)
	//new_obj(t_platform(5), 5,7)
end

function init_platform(o)
	o.box = {x=0,y=0,w=8,h=2}
	o.tile.id = 34
	
	add(platforms, o)
end

function upd_platform(o)
	move_x(o, o.h_spd)
	o.type.offset=o.type.offset+o.h_spd

	if(
		o.type.offset == o.type.span-1
		or
		o.type.offset == 0
	) then
		o.h_spd=-o.h_spd
	end
end